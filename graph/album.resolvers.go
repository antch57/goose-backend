package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"
	"fmt"

	"github.com/antch57/jam-statz/graph/model"
)

// Band is the resolver for the band field.
func (r *albumResolver) Band(ctx context.Context, obj *model.Album) (*model.Band, error) {
	res, err := r.BandRepo.GetBandByID(obj.BandID)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// Songs is the resolver for the songs field.
func (r *albumResolver) Songs(ctx context.Context, obj *model.Album) ([]*model.AlbumSong, error) {
	panic(fmt.Errorf("not implemented: Songs - songs album resolver"))
}

// Song is the resolver for the song field.
func (r *albumSongResolver) Song(ctx context.Context, obj *model.AlbumSong) (*model.Song, error) {
	res, err := r.SongRepo.GetSongById(obj.SongID)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// Album is the resolver for the album field.
func (r *albumSongResolver) Album(ctx context.Context, obj *model.AlbumSong) (*model.Album, error) {
	res, err := r.AlbumRepo.GetAlbumByID(obj.AlbumID)
	if err != nil {
		return nil, err
	}

	return res, nil
}

// AlbumSongs is the resolver for the albumSongs field.
func (r *albumInputResolver) AlbumSongs(ctx context.Context, obj *model.AlbumInput, data []*model.AlbumSongInput) error {
	panic(fmt.Errorf("not implemented: AlbumSongs - albumSongs, album song resolver"))
}

// Album returns AlbumResolver implementation.
func (r *Resolver) Album() AlbumResolver { return &albumResolver{r} }

// AlbumSong returns AlbumSongResolver implementation.
func (r *Resolver) AlbumSong() AlbumSongResolver { return &albumSongResolver{r} }

// AlbumInput returns AlbumInputResolver implementation.
func (r *Resolver) AlbumInput() AlbumInputResolver { return &albumInputResolver{r} }

type albumResolver struct{ *Resolver }
type albumSongResolver struct{ *Resolver }
type albumInputResolver struct{ *Resolver }
