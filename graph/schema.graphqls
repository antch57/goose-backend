type Bands {
  bands: [Band!]
}

type Band {
  id: ID!
  name: String!
  genre: String!
  albums: [Album!]
  year: Int!
  description: String
}

type Album {
  id: ID!
  title: String!
  releaseDate: String!
  songs: [Song!]!
  bandId: ID!
}

type Song {
  id: ID!
  title: String!
  duration: Int!
  albumId: ID
}

input AlbumInput {
  title: String!
  releaseDate: String!
  songs: [SongInput!]!
}

input SongInput {
  title: String!
  duration: Int!
  albumId: ID
}

type Query {
  bands: [Band!]
  band(id: ID!): Band
  album(id: ID!): Album
  song(id: ID!): Song
}

type Mutation {
  createBand(name: String!, genre: String!, year: Int!, albums: [AlbumInput!], description: String): Band!
  createAlbum(bandId: ID!, title: String!, releaseDate: String!): Album!
  createSong(bandId: ID!, albumId: ID!, title: String!, duration: Int!): Song!
  deleteBand(bandId: ID!): Boolean!
  deleteAlbum(albumId: ID!): Boolean!
  deleteSong(songId: ID!): Boolean!
}